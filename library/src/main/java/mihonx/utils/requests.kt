package mihonx.utils

import eu.kanade.tachiyomi.network.DEFAULT_BODY
import eu.kanade.tachiyomi.network.DEFAULT_CACHE_CONTROL
import eu.kanade.tachiyomi.network.GET
import eu.kanade.tachiyomi.network.POST
import eu.kanade.tachiyomi.network.awaitSuccess
import eu.kanade.tachiyomi.source.online.HttpSource
import okhttp3.CacheControl
import okhttp3.Headers
import okhttp3.HttpUrl
import okhttp3.OkHttpClient
import okhttp3.RequestBody
import okhttp3.Response

/**
 * Send a GET request
 *
 * @since extensions-lib 1.6
 *
 * @param url [String]          the url to send the request to
 * @param headers [Headers]     the request headers, defaults to the headers generated by HttpSource.headersBuilder()
 * @param cache [CacheControl]  the cache used, defaults to the one provided by the app
 */
context(HttpSource)
suspend fun OkHttpClient.get(
    url: String,
    headers: Headers = this@HttpSource.headers,
    cache: CacheControl = DEFAULT_CACHE_CONTROL,
): Response {
    return newCall(GET(url, headers, cache)).awaitSuccess()
}

/**
 * Send a GET request
 *
 * @since extensions-lib 1.6
 *
 * @param url [HttpUrl]         the url to send the request to
 * @param headers [Headers]     the request headers, defaults to the headers generated by HttpSource.headersBuilder()
 * @param cache [CacheControl]  the cache used, defaults to the one provided by the app
 */
context(HttpSource)
suspend fun OkHttpClient.get(
    url: HttpUrl,
    headers: Headers = this@HttpSource.headers,
    cache: CacheControl = DEFAULT_CACHE_CONTROL,
): Response {
    return newCall(GET(url, headers, cache)).awaitSuccess()
}

/**
 * Send a POST request
 *
 * @since extensions-lib 1.6
 *
 * @param url [String]          the url to send the request to
 * @param headers [Headers]     the request headers, defaults to the headers generated by HttpSource.headersBuilder()
 * @param body [RequestBody]    the request body, defaults to the one provided by the app
 * @param cache [CacheControl]  the cache used, defaults to the one provided by the app
 */
context(HttpSource)
suspend fun OkHttpClient.post(
    url: String,
    headers: Headers = this@HttpSource.headers,
    body: RequestBody = DEFAULT_BODY,
    cache: CacheControl = DEFAULT_CACHE_CONTROL,
): Response {
    return newCall(POST(url, headers, body, cache)).awaitSuccess()
}
